import { Context, TableMeta } from '../types';
import { RecordsEndpoint } from './record';
import { FieldsEndpoint } from './field';
import { FilesEndpoint } from './file';
export declare class TablesEndpoint {
    #private;
    constructor(context: Context);
    static createInst(context: Context, meta: TableMeta): Table;
}
export interface TableMetadata {
    fields: {
        [fieldName: string]: {
            id: string;
            name: string;
            type: string;
        };
    };
}
declare class Table {
    #private;
    constructor(context: Context, meta: TableMeta);
    /**
     * @example
     * ```ts
     * const metadata = await api.repos('repoId').table('tableId').getMetadata();
     * ```
     * @returns {Promise<TableMetadata>}
     * @memberof Table
     * @throws {ApiError}
     */
    meta(): Promise<TableMetadata>;
    get records(): RecordsEndpoint;
    get file(): FilesEndpoint;
    get fields(): FieldsEndpoint;
}
export {};

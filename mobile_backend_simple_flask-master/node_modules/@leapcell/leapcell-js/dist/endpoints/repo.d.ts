import { Context, NameType, RepoMeta } from '../types';
import { TablesEndpoint } from './table';
export declare class ReposEndpoint {
    #private;
    constructor(context: Context);
    static createInst(context: Context, meta: RepoMeta): Repo;
}
export declare class Repo {
    #private;
    constructor(context: Context, meta: RepoMeta);
    get tables(): TablesEndpoint;
    /**
     * @example
     * ```ts
     * const table = api.repos('repoId').table('tableId');
     * ```
     * @param {string} tableId - The id of the table
     * @param {NameType} nameType - The type of the name to use, either 'id' or 'name'
     * @returns {TablesEndpoint}
     * @memberof LeapcellApi
     */
    table(tableId: string, nameType?: NameType): {
        "__#5@#context": Context;
        "__#5@#meta": import("../types").TableMeta;
        meta(): Promise<import("./table").TableMetadata>;
        "__#5@#records": import("./record").RecordsEndpoint | undefined;
        readonly records: import("./record").RecordsEndpoint;
        "__#5@#file": import("./file").FilesEndpoint | undefined;
        readonly file: import("./file").FilesEndpoint;
        "__#5@#fields": import("./field").FieldsEndpoint | undefined;
        readonly fields: import("./field").FieldsEndpoint;
    };
}

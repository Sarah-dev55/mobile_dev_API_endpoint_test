import { ReposEndpoint } from './endpoints/repo';
export type { TableMetadata } from './endpoints/table';
export type { Record } from './endpoints/record';
export type { ApiVersion } from './types';
export interface ApiOptions {
    apiKey: string;
    endpoint?: string;
}
/**
 * @example
 * ```ts
 * const api = new Leapcell({
 *  token: 'xxx',
 * endpoint: 'https://api.leapcell.io',
 * });
 * ```
 * @constructor
 * @param {ApiOptions} options
 * @param {string} options.api_key - The api_key to authenticate with
 * @param {string} options.endpoint - The endpoint to connect to
 * @param {ApiVersion} options.apiVersion - The version of the API to use
 */
export declare class Leapcell {
    #private;
    constructor(options: ApiOptions);
    get repos(): ReposEndpoint;
    /**
     * @example
     * ```ts
     * const repo =  api.repo('owner', 'repoName')
     * ```
     * @param {string} owner - The owner of the repo
     * @param {string} repoName - The name of the repo
     * @returns {ReposEndpoint}
     * @memberof LeapcellApi
     *
     */
    repo(resource: string): import("./endpoints/repo").Repo;
    /**
   * @example
   * ```ts
   * const repo =  api.project('owner', 'repoName')
   * ```
   * @param {string} owner - The owner of the repo
   * @param {string} repoName - The name of the repo
   * @returns {ReposEndpoint}
   * @memberof LeapcellApi
   *
   */
    project(resource: string): import("./endpoints/repo").Repo;
}
